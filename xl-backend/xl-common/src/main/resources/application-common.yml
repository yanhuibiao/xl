spring:
#  datasource:
#    url: jdbc:mysql://192.168.224.128:3306${xl.db}?useSSL=false&allowPublicKeyRetrieval=true
#    username: root
#    password: root
#    driver-class-name: com.mysql.cj.jdbc.Driver
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration #已经自己重写了Rabbit配置
  rabbitmq:
    host: 192.168.224.128
    port: 5672
    username: admin
    password: admin
    virtual-host: /
    # 连接池配置
    connection-timeout: 5000
    cache:
      channel:
        size: 50
        checkout-timeout: 1000
      connection:
        mode: CONNECTION
        size: 5
    # 生产者配置
    publisher-confirm-type: correlated  # 发送方确认模式
    publisher-returns: true             # 开启返回机制
    template:
      mandatory: true                   # 消息不可达时返回给生产者
      retry:
        enabled: true                   # 发送失败时重试
        initial-interval: 1000         # 初始间隔(ms)
        max-interval: 10000             # 最大间隔(ms)
        multiplier: 2.0                # 间隔乘数
        max-attempts: 3                 # 最大重试次数
    # 消费者配置
    listener:
      type: simple                     # 监听器类型
      simple:
        acknowledge-mode: manual        # 开启消费者确认，手动确认
        concurrency: 5                 # 最小消费者数量
        max-concurrency: 10            # 最大消费者数量
        prefetch: 50                   # 每个消费者最大预取消息数
        retry:
          enabled: true                # 消费失败重试
          max-attempts: 3              # 消费最大重试次数
          initial-interval: 1000       # 初始间隔(ms)
          max-interval: 10000          # 最大间隔(ms)
          multiplier: 2.0              # 间隔乘数
        default-requeue-rejected: true # 被拒绝的消息是否重新放回队列。默认值为 true
  data:
    redis:  #Redis相关配置
      host: 192.168.224.128
      port: 6379
      database: 0
      jedis:
        pool:
          max-active: 8 #最大连接数
          max-wait: 100ms #连接池最大阻塞等待时间
          max-idle: 4 #连接池中的最大空闲连接
          min-idle: 0 #连接池中的最小空闲连接
      password: root
  cloud:
    sentinel:   # sentinel配置
      transport:
        dashboard: 192.168.224.128:8858
#        port: 8719
#        clientIp: 192.168.31.92
      eager: true    # 启动时立即连接控制台
      log:
        dir: C:\Users\77238\Desktop\log\sentinel

logging:  # spring框架的日志。日志配置
  config: classpath:com/xl/common/logback-spring.xml
#  pattern:
#    dateformat: yyyy-MM-dd HH:mm:ss.SSS
  level:
    com.zaxxer.hikari: error
    com.alibaba: info
    org.springframework.aop: DEBUG
#    root: info
#    javax.activation: info
#    org.apache.catalina: info
#    org.apache.commons.beanutils.converters: info
#    org.apache.coyote.http11.Http11Processor: info
#    org.apache.http: info
#    org.apache.tomcat: info
    org.springframework.security: debug
#    com.chinamobile.cmss.bdpaas.resource.monitor: debug

seata:
  registry: # TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址
    # 参考tc服务自己的registry.conf中的配置
    type: nacos
    nacos: # tc
      server-addr: 192.168.224.128:8848
      username: nacos
      password: nacos
      namespace:
      group: DEFAULT_GROUP
      application: seata-server # seata-tc服务在nacos中的服务名称
      cluster: default
  tx-service-group: default_tx_group # 事务组，根据这个获取tc服务的cluster名称
  service:
    vgroupMapping: # 事务组与TC服务cluster的映射关系
      default_tx_group: default
#    grouplist:
#      default: 192.168.224.128:8091
  data-source-proxy-mode: AT
  enable-auto-data-source-proxy: false  #这里关闭字段代理数据源避免与shardingsphere冲突，从而查询的是逻辑表
#  config:    #seata读取配置
#    type: nacos
#    nacos:
#      server-addr: 192.168.224.128:8848
#      namespace:
#      group: DEFAULT_GROUP
#      username: nacos
#      password: nacos
#      data-id: seataServer.properties
  client:
    tm:
      commit-retry-count: 5
      rollback-retry-count: 5
      default-global-transaction-timeout: 6000
    rm:
      report-retry-count: 5
      table-meta-check-enable: false  # 禁用元数据检查
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  api-docs.enabled: true